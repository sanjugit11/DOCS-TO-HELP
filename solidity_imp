// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <0.9.0;

contract Receiver {                                             //thisw will recieve the ETH from caller
    uint public num;

    event Received(address caller, uint value, string message);


    fallback() external payable {
        emit Received(msg.sender, msg.value, "Fallback calling !");  ///fallback is use for the data and value to recieve from user
    }

    receive() external payable {
        emit Received(msg.sender, msg.value, "Receive Payable calling....");    //this will recieve the value not data //by default use in both
    }

    function foo(string memory message, uint x) public payable returns(uint) {
        emit Received(msg.sender, msg.value, _message);
        
        return _x + 1;
    }

    function showBalance() public view returns (uint) {
        return address(this).balance;
    }
}

contract Demo {
    bytes32 public my_byte;
    bytes4 public st;

    constructor() public {
        my_byte = keccak256("foo(string,uint256)");
    }

    function convert() public  {
        st = bytes4(my_byte);
    }

    function apiSignature() public view returns (bytes memory) {
        return abi.encodeWithSignature("foo(string,uint256)");
    }
}

contract Caller {
    event Response(bool success, bytes data);

    function testCheck(address payable _to) public payable {
        (bool success, bytes memory data) = _to.call{value: msg.value, gas: 5000}(
            abi.encodeWithSignature("foo(string,uint256)", "Hello", 200)                //this will help to send the ETH value without FALLBACK &
        );                                                                              //RECIEVE ...this is calling the anothe contract function
        emit Response(success, data);                                                   // and sending ETH .....! this is byte4 value in the signature
    }                                    //abi.encodeWIthSelector recieves the Kakkac256 of byt (32bytes(64)) data with is then converted (4 byte(8))
}
